#parse("../../../../include/entitiesNamesRef.vm")
#set ( $LCentityName = $fn.uncapitalize($entity.name) )
#set ( $LCentityNameWithDot = $fn.uncapitalize($entity.name) + "." )
#set ( $_entityService = "_" + $fn.uncapitalize($baseServiceName) )
// File generated by $generator.name ( version $generator.version ) - Date $today.date("yyyy-MM-dd") ( Time $today.time )

// Modules imports
import { NotificationService } from './../../../services/notification.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Component, OnInit, ViewChild } from '@angular/core';

// Models and services imports
import { $entity.name } from './../$fn.uncapitalize($LCentityNameModel)';
import { $baseServiceName } from './../services/$fn.uncapitalize($LCentityNameService)';
#set($attrsFKs = [])
#foreach ($attribute in $entity.attributes)
#if ($attribute.isFK())
#if( $attrsFKs.add($attribute.referencedEntityName) )#end
#set($referencedEntity = $attribute.referencedEntityName)
import { ${referencedEntity} } from './../../${fn.uncapitalize($referencedEntity)}/${fn.uncapitalize($referencedEntity)}.model';
import { ${referencedEntity}Service } from './../../${fn.uncapitalize($referencedEntity)}/services/${fn.uncapitalize($referencedEntity)}.service';
#end
#end
import * as _ from 'underscore';
import { BsDatepickerConfig } from 'ngx-bootstrap/datepicker';

@Component({
  selector: 'app-${LCentityName}-form',
  templateUrl: './${LCentityName}-form.component.html',
  styleUrls: ['./${LCentityName}-form.component.css']
})
export class $formComponentName implements OnInit {

  // HTTP status code
  readonly NOT_FOUND_ERROR = 404;
  readonly CONFLICT_ERROR = 409;
  readonly INTERNAL_SERVER_ERROR = 500;

  @ViewChild('deleteModal') deleteModal;

  private title = '${entity.name} Form';
  private $LCentityName: ${entity.name};
  private form: FormGroup;
  private ids;

  private bsConfig: Partial<BsDatepickerConfig>;

#if ($attrsFKs.size() > 0)
#foreach ( $entitiesFK in $attrsFKs)
  // $entitiesFK Select
  private ${fn.uncapitalize($entitiesFK)}sData: ${entitiesFK}[];

#end
#end
  constructor(
#if ($attrsFKs.size() > 0)
#foreach ( $entitiesFK in $attrsFKs)
    private _${fn.uncapitalize($entitiesFK)}Service: ${entitiesFK}Service,
#end
#end
    private $_entityService: $baseServiceName,
    private _route: ActivatedRoute,
    private _router: Router,
    private _formBuilder: FormBuilder,
    private _notificationService: NotificationService) {

    this.bsConfig = Object.assign({}, { containerClass: 'theme-dark-blue' });
  }

  ngOnInit() {
    this.getIdFromRouteParams();
#if ($attrsFKs.size() > 0)
#foreach ( $entitiesFK in $attrsFKs)
    this.fetch${entitiesFK}s();
#end
#end
    this.initForm();
  }

  getIdFromRouteParams = () => {
    this._route.params.subscribe(p => {
        this.ids = _.values(p);
    });
  }

#if ($attrsFKs.size() > 0)
#foreach ( $entitiesFK in $attrsFKs)
  fetch${entitiesFK}s = () => {
    this._${fn.uncapitalize($entitiesFK)}Service.getAll().subscribe(
      (data: ${entitiesFK}[]) => this.${fn.uncapitalize($entitiesFK)}sData = data,
      error => console.error(error));
  }

#end
#end
  initForm = () => {
    this.form = this._formBuilder.group(this.getNewForm());
    if (!_.isEmpty(this.ids)) {
      this.load();
    }
  }

  getNewForm = () => {
    return {
#foreach ( $attrib in $entity.attributes)
#if ($foreach.count < $entity.attributes.size())
#if ( $attrib.isKeyElement() )
#if ( $attrib.isAutoIncremented() )
      $attrib.name: [{
          value: '',
          disabled: true
      }],
#else
      $attrib.name: ['', Validators.required ],
#end
#else
#if ( $attrib.isNotNull() )
      $attrib.name: ['', Validators.required ],
#else
      $attrib.name: [''],
#end
#end
#else
#if ( $attrib.isNotNull() )
      $attrib.name: ['', Validators.required ]
#else
      $attrib.name: ['']
#end
#end
#end
    };
  }

  load = () => {
    this.${_entityService}.getSingle(this.ids).subscribe(
      ($LCentityName: ${entity.name}) => {
        this.${LCentityName} = ${LCentityName};
        this.form.setValue({
#foreach ( $attrib in $entity.attributes)
#if ($foreach.count < $entity.attributes.size())
          $attrib.name: ${LCentityName}.${attrib.name},
#else
          $attrib.name: ${LCentityName}.${attrib.name}
#end
#end
        });
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  save = () => {
	// If we didn't get a ${LCentityName}, we are adding a ${LCentityName}
    if (!this.${LCentityName}) {
      this.add();
    } else { // If we didn't get a ${LCentityName}, we are adding a ${LCentityName}
      this.update();
    }
  }

  add = () => {
    this.${_entityService}.add(this.form.value).subscribe(
      result => {
        this._notificationService.success('Success', '${entity.name} added successfuly');
        this._router.navigate(['./${LCentityName}-form', ${entity.keyAttributesNamesAsString(', ', 'this.form.value.', '')}]);
      },
      error => {
        if (error.status === this.CONFLICT_ERROR) {
          this._notificationService.error(error.statusText, 'Id already used in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  update = () => {
    this.${_entityService}.update(<${entity.name}>this.form.getRawValue(), this.ids).subscribe(
      result => this._notificationService.success('Success', '${entity.name} edited successfuly'),
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  openDeleteModal = () => {
    this.deleteModal.open();
  }

#set ($entityDeletePrefix = "this.${LCentityName}.")
  confirmDelete = (): void => {
    // Call delete service
    this._${LCentityName}Service.delete(${entity.keyAttributesNamesAsString(', ', $entityDeletePrefix, '')}).subscribe(
      result => {
        this._router.navigate(['./${LCentityName}-list']);

        this._notificationService.success(
          'Deleted',
#set ($entityDeleteNotificationPrefix = "${DOLLAR}{${entityDeletePrefix}")
          `The ${LCentityName} entry with the id(s)='${entity.keyAttributesNamesAsString(', ', $entityDeleteNotificationPrefix, '}')}' was deleted successfuly`);
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });

    this.deleteModal.close();
  }
}
