#parse("../../../../include/entitiesNamesRef.vm")
// File generated by $generator.name ( version $generator.version ) - Date $today.date("yyyy-MM-dd") ( Time $today.time )
$env.setLanguage('TypeScript')
#set ( $LCentityName = $fn.uncapitalize($entity.name) )
#set ( $_entityService = "_" + $fn.uncapitalize($baseServiceName) )
// Modules imports
import { Component, OnInit, ViewChild } from '@angular/core';
import { Router } from '@angular/router';

// Services imports
import { PagerService } from './../../../services/pager.service';
import { EmitterService } from './../../../services/emitter.service';
import { NotificationService } from './../../../services/notification.service';
import { $baseServiceName } from './../services/$fn.uncapitalize($LCentityNameService)';

// Models imports
import { $entity.name } from '../$fn.uncapitalize($LCentityNameModel)';

@Component({
  selector: 'app-${LCentityName}-list',
  templateUrl: './${LCentityName}-list.component.html',
  styleUrls: ['./${LCentityName}-list.component.css']
})
export class $listComponentName implements OnInit {

  @ViewChild('deleteModal') deleteModal;
#foreach ( $attrib in $entity.keyAttributes)
  private ${attrib.name}ToDelete: $attrib.formattedType(0);
#end

  private ${LCentityName}IdToDelete;

  private listOf${entity.name}s: ${entity}[];
  private listId = '$fn.toUpperCase(${entity.name})_COMPONENT_LIST';

  private title = 'List of ${entity.name}s';

  // pager object
  private pager: any = {};
  // paged items
  private pagedItems: any[];

  constructor(
    private $_entityService: $baseServiceName,
    private _router: Router,
    private _notificationService: NotificationService,
    private pagerService: PagerService) { }

  ngOnInit() {
    // On init get all ${entity.name}s
    this.getAll${entity.name}s();

    // Listen to the 'list' emitted event so as populate the model with the event payload
    // Refresh ${entity.name} list
    EmitterService.get(this.listId).subscribe((data: ${entity.name}[]) => this.getAll${entity.name}s());
  }

  /**
   * Get all ${entity.name} using the service ${entity.name}Service
   */
  getAll${entity.name}s = (): void => {
    this._${LCentityName}Service.getAll().subscribe(
      (data: ${entity.name}[]) => {
        this.listOf${entity.name}s = data;
        this.setPage(1);
      },
      error => {
        this._notificationService.error(
          'Error',
          'An error occured when trying to reach the server');
    });
  }

  edit${entity.name} = ($entity.keyAttributesNamesAsString(', ')): void => {
    // Navigate to $LCentityName form component
    this._router.navigate(['./${LCentityName}-form', $entity.keyAttributesNamesAsString(', ')]);
  }

  openDeleteModal($entity.keyAttributesNamesAsString(', ')) {
#foreach ( $attrib in $entity.keyAttributes)
    this.${attrib.name}ToDelete = $attrib.name;
#end
    this.deleteModal.open();
  }

  confirmDelete() {
    this.${_entityService}.delete($entity.keyAttributesNamesAsString(', ', 'this.', 'ToDelete')).subscribe(
      result => {
        // Notify ${entity.name} list to refresh
        EmitterService.get(this.listId).emit(result);

        this._notificationService.success(
          'Deleted',
          `The car $LCentityName with the id='$entity.keyAttributesNamesAsString(', ', '${this.', 'ToDelete}')' was deleted successfuly`);
      },
      error => {
        this._notificationService.error(
          'Error',
          'An error occured when trying to reach the server');
      });

    this.deleteModal.close();
  }

  setPage(page: number) {
    if (page < 1 || page > this.pager.totalPages) {
      return;
    }

    // get pager object from service
    this.pager = this.pagerService.getPager(this.listOf${entity.name}s.length, page);

    // get current page of items
    this.pagedItems = this.listOf${entity.name}s.slice(this.pager.startIndex, this.pager.endIndex + 1);
  }
}
